
helmholtz-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003adc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003adc  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011489  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f3  00000000  00000000  000314c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000337b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00034638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022c2  00000000  00000000  000353e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c23  00000000  00000000  000376a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceaca  00000000  00000000  000492c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c98  00000000  00000000  00117de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a60 	.word	0x08003a60

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003a60 	.word	0x08003a60

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb07 	bl	8000aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f809 	bl	80004f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8fa 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f84c 	bl	8000584 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004ec:	f000 f888 	bl	8000600 <MX_SPI1_Init>
  MX_UART4_Init();
 80004f0:	f000 f8c4 	bl	800067c <MX_UART4_Init>

  // INIT PID LOOP X
  // INIT PID LOOP Y
  // INIT PID LOOP Z

  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x1c>

080004f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b096      	sub	sp, #88	; 0x58
 80004fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	2244      	movs	r2, #68	; 0x44
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f003 faa3 	bl	8003a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000518:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051c:	f000 ffb2 	bl	8001484 <HAL_PWREx_ControlVoltageScaling>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000526:	f000 f947 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800052a:	2310      	movs	r3, #16
 800052c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000536:	2360      	movs	r3, #96	; 0x60
 8000538:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053a:	2300      	movs	r3, #0
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fff4 	bl	8001530 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800054e:	f000 f933 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fbf4 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000576:	f000 f91f 	bl	80007b8 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3758      	adds	r7, #88	; 0x58
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_I2C1_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_I2C1_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000590:	f640 6214 	movw	r2, #3604	; 0xe14
 8000594:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <MX_I2C1_Init+0x74>)
 800059e:	2201      	movs	r2, #1
 80005a0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005c2:	f000 fe2b 	bl	800121c <HAL_I2C_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005cc:	f000 f8f4 	bl	80007b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005d4:	f000 feb1 	bl	800133a <HAL_I2CEx_ConfigAnalogFilter>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005de:	f000 f8eb 	bl	80007b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005e6:	f000 fef3 	bl	80013d0 <HAL_I2CEx_ConfigDigitalFilter>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005f0:	f000 f8e2 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40005400 	.word	0x40005400

08000600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_SPI1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_SPI1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_SPI1_Init+0x74>)
 800060c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_SPI1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_SPI1_Init+0x74>)
 800061a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800061e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_SPI1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_SPI1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_SPI1_Init+0x74>)
 800062e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000632:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_SPI1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_SPI1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_SPI1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_SPI1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_SPI1_Init+0x74>)
 800064e:	2207      	movs	r2, #7
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_SPI1_Init+0x74>)
 800065a:	2208      	movs	r2, #8
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_SPI1_Init+0x74>)
 8000660:	f002 f8fc 	bl	800285c <HAL_SPI_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f8a5 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000007c 	.word	0x2000007c
 8000678:	40013000 	.word	0x40013000

0800067c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_UART4_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <MX_UART4_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_UART4_Init+0x58>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_UART4_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_UART4_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_UART4_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_UART4_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_UART4_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_UART4_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_UART4_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_UART4_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_UART4_Init+0x58>)
 80006c0:	f002 f96f 	bl	80029a2 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f875 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000e0 	.word	0x200000e0
 80006d8:	40004c00 	.word	0x40004c00

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_GPIO_Init+0xd0>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a27      	ldr	r2, [pc, #156]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_GPIO_Init+0xd0>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DBG_1_Pin|DBG_2_Pin|Z_DIR_Pin|Y_DIR_Pin
 8000752:	2200      	movs	r2, #0
 8000754:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
 8000758:	4815      	ldr	r0, [pc, #84]	; (80007b0 <MX_GPIO_Init+0xd4>)
 800075a:	f000 fd47 	bl	80011ec <HAL_GPIO_WritePin>
                          |X_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_3_GPIO_Port, DBG_3_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2101      	movs	r1, #1
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_GPIO_Init+0xd8>)
 8000764:	f000 fd42 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DBG_1_Pin DBG_2_Pin Z_DIR_Pin Y_DIR_Pin
                           X_DIR_Pin */
  GPIO_InitStruct.Pin = DBG_1_Pin|DBG_2_Pin|Z_DIR_Pin|Y_DIR_Pin
 8000768:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
 800076c:	617b      	str	r3, [r7, #20]
                          |X_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000782:	f000 fbb9 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DBG_3_Pin */
  GPIO_InitStruct.Pin = DBG_3_Pin;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DBG_3_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_GPIO_Init+0xd8>)
 800079e:	f000 fbab 	bl	8000ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000800 	.word	0x48000800
 80007b4:	48001c00 	.word	0x48001c00

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_MspInit+0x44>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6613      	str	r3, [r2, #96]	; 0x60
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_MspInit+0x44>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x44>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6593      	str	r3, [r2, #88]	; 0x58
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x44>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0a4      	sub	sp, #144	; 0x90
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2268      	movs	r2, #104	; 0x68
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f003 f90f 	bl	8003a50 <memset>
  if(hi2c->Instance==I2C1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a21      	ldr	r2, [pc, #132]	; (80008bc <HAL_I2C_MspInit+0xb0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d13b      	bne.n	80008b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000840:	2300      	movs	r3, #0
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fca9 	bl	80021a0 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000854:	f7ff ffb0 	bl	80007b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_I2C_MspInit+0xb4>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_I2C_MspInit+0xb4>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_I2C_MspInit+0xb4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000870:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000874:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000876:	2312      	movs	r3, #18
 8000878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000888:	2304      	movs	r3, #4
 800088a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 fb2e 	bl	8000ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_I2C_MspInit+0xb4>)
 800089e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_I2C_MspInit+0xb4>)
 80008a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a6:	6593      	str	r3, [r2, #88]	; 0x58
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_I2C_MspInit+0xb4>)
 80008aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3790      	adds	r7, #144	; 0x90
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40005400 	.word	0x40005400
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_SPI_MspInit+0x7c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d128      	bne.n	8000938 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_SPI_MspInit+0x80>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <HAL_SPI_MspInit+0x80>)
 80008ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f0:	6613      	str	r3, [r2, #96]	; 0x60
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_SPI_MspInit+0x80>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_SPI_MspInit+0x80>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_SPI_MspInit+0x80>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_SPI_MspInit+0x80>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000916:	23e0      	movs	r3, #224	; 0xe0
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000926:	2305      	movs	r3, #5
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f000 fae0 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40013000 	.word	0x40013000
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0a4      	sub	sp, #144	; 0x90
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2268      	movs	r2, #104	; 0x68
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 f871 	bl	8003a50 <memset>
  if(huart->Instance==UART4)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <HAL_UART_MspInit+0xc0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d142      	bne.n	80009fe <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000978:	2308      	movs	r3, #8
 800097a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fc0b 	bl	80021a0 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000990:	f7ff ff12 	bl	80007b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_UART_MspInit+0xc4>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000998:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <HAL_UART_MspInit+0xc4>)
 800099a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800099e:	6593      	str	r3, [r2, #88]	; 0x58
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <HAL_UART_MspInit+0xc4>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0xc4>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <HAL_UART_MspInit+0xc4>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_MspInit+0xc4>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009c4:	2303      	movs	r3, #3
 80009c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009da:	2308      	movs	r3, #8
 80009dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 fa85 	bl	8000ef8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2034      	movs	r0, #52	; 0x34
 80009f4:	f000 f9cb 	bl	8000d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009f8:	2034      	movs	r0, #52	; 0x34
 80009fa:	f000 f9e4 	bl	8000dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3790      	adds	r7, #144	; 0x90
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40004c00 	.word	0x40004c00
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f89c 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <UART4_IRQHandler+0x10>)
 8000a6a:	f001 ffe9 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000e0 	.word	0x200000e0

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff ffea 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	; (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f002 ff9d 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ace:	f7ff fd03 	bl	80004d8 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae0:	08003ad0 	.word	0x08003ad0
  ldr r2, =_sbss
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae8:	20000168 	.word	0x20000168

08000aec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_IRQHandler>

08000aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f93d 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f80e 	bl	8000b20 <HAL_InitTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e001      	b.n	8000b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b10:	f7ff fe58 	bl	80007c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_InitTick+0x6c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d023      	beq.n	8000b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <HAL_InitTick+0x70>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f949 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10f      	bne.n	8000b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d809      	bhi.n	8000b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 f913 	bl	8000d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_InitTick+0x74>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e007      	b.n	8000b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e004      	b.n	8000b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e001      	b.n	8000b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000164 	.word	0x20000164

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000164 	.word	0x20000164

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff29 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff3e 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff8e 	bl	8000ccc <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff31 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffa2 	bl	8000d34 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d008      	beq.n	8000e24 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2204      	movs	r2, #4
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e022      	b.n	8000e6a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020e 	bic.w	r2, r2, #14
 8000e32:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0201 	bic.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f003 021c 	and.w	r2, r3, #28
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	2101      	movs	r1, #1
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d005      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2204      	movs	r2, #4
 8000e92:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e029      	b.n	8000eee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 020e 	bic.w	r2, r2, #14
 8000ea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f003 021c 	and.w	r2, r3, #28
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	4798      	blx	r3
    }
  }
  return status;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e154      	b.n	80011b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8146 	beq.w	80011ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d005      	beq.n	8000f38 <HAL_GPIO_Init+0x40>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d130      	bne.n	8000f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 0201 	and.w	r2, r3, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	6939      	ldr	r1, [r7, #16]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80a0 	beq.w	80011ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6613      	str	r3, [r2, #96]	; 0x60
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001084:	4a53      	ldr	r2, [pc, #332]	; (80011d4 <HAL_GPIO_Init+0x2dc>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ae:	d019      	beq.n	80010e4 <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2e4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1e4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <HAL_GPIO_Init+0x2ec>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1dc>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e008      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010d4:	2307      	movs	r3, #7
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010d8:	2303      	movs	r3, #3
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010dc:	2302      	movs	r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e4:	2300      	movs	r3, #0
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f6:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_GPIO_Init+0x2dc>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f aea3 	bne.w	8000f08 <HAL_GPIO_Init+0x10>
  }
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000c00 	.word	0x48000c00
 80011e4:	48001000 	.word	0x48001000
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001208:	e002      	b.n	8001210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e081      	b.n	8001332 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fae2 	bl	800080c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800126c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800127c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	e006      	b.n	80012a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d104      	bne.n	80012b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69d9      	ldr	r1, [r3, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1a      	ldr	r2, [r3, #32]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2220      	movs	r2, #32
 800131e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b20      	cmp	r3, #32
 800134e:	d138      	bne.n	80013c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800135a:	2302      	movs	r3, #2
 800135c:	e032      	b.n	80013c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2224      	movs	r2, #36	; 0x24
 800136a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800138c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2220      	movs	r2, #32
 80013b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d139      	bne.n	800145a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e033      	b.n	800145c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800145a:	2302      	movs	r3, #2
  }
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_PWREx_GetVoltageRange+0x18>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40007000 	.word	0x40007000

08001484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001492:	d130      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a0:	d038      	beq.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2232      	movs	r2, #50	; 0x32
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0c9b      	lsrs	r3, r3, #18
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	e002      	b.n	80014d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014dc:	d102      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f2      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f0:	d110      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e00f      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001502:	d007      	beq.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001512:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000
 8001528:	20000000 	.word	0x20000000
 800152c:	431bde83 	.word	0x431bde83

08001530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	f000 bc02 	b.w	8001d48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001544:	4b96      	ldr	r3, [pc, #600]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154e:	4b94      	ldr	r3, [pc, #592]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80e4 	beq.w	800172e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_RCC_OscConfig+0x4c>
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	f040 808b 	bne.w	800168a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b01      	cmp	r3, #1
 8001578:	f040 8087 	bne.w	800168a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157c:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_OscConfig+0x64>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e3d9      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <HAL_RCC_OscConfig+0x7e>
 80015a4:	4b7e      	ldr	r3, [pc, #504]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ac:	e005      	b.n	80015ba <HAL_RCC_OscConfig+0x8a>
 80015ae:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d223      	bcs.n	8001606 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fd8c 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3ba      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a72      	ldr	r2, [pc, #456]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	496d      	ldr	r1, [pc, #436]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f0:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	4968      	ldr	r1, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e025      	b.n	8001652 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a65      	ldr	r2, [pc, #404]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4960      	ldr	r1, [pc, #384]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001624:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	495b      	ldr	r1, [pc, #364]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd4c 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e37a      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001652:	f000 fc81 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001656:	4602      	mov	r2, r0
 8001658:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	4950      	ldr	r1, [pc, #320]	; (80017a4 <HAL_RCC_OscConfig+0x274>)
 8001664:	5ccb      	ldrb	r3, [r1, r3]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <HAL_RCC_OscConfig+0x278>)
 8001670:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001672:	4b4e      	ldr	r3, [pc, #312]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fa52 	bl	8000b20 <HAL_InitTick>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d052      	beq.n	800172c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	e35e      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d032      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001692:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169e:	f7ff fa8f 	bl	8000bc0 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a6:	f7ff fa8b 	bl	8000bc0 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e347      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a35      	ldr	r2, [pc, #212]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4930      	ldr	r1, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	492b      	ldr	r1, [pc, #172]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
 80016f6:	e01a      	b.n	800172e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001704:	f7ff fa5c 	bl	8000bc0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170c:	f7ff fa58 	bl	8000bc0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e314      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1dc>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d073      	beq.n	8001822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x21c>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d10e      	bne.n	8001764 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d063      	beq.n	8001820 <HAL_RCC_OscConfig+0x2f0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d15f      	bne.n	8001820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e2f1      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x24c>
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e025      	b.n	80017c8 <HAL_RCC_OscConfig+0x298>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d114      	bne.n	80017b0 <HAL_RCC_OscConfig+0x280>
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a02      	ldr	r2, [pc, #8]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e013      	b.n	80017c8 <HAL_RCC_OscConfig+0x298>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	08003a78 	.word	0x08003a78
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004
 80017b0:	4ba0      	ldr	r3, [pc, #640]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a9f      	ldr	r2, [pc, #636]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b9d      	ldr	r3, [pc, #628]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a9c      	ldr	r2, [pc, #624]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff f9f6 	bl	8000bc0 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff f9f2 	bl	8000bc0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e2ae      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	4b92      	ldr	r3, [pc, #584]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2a8>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f9e2 	bl	8000bc0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f9de 	bl	8000bc0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e29a      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001812:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x2d0>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d060      	beq.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x310>
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d119      	bne.n	800186e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d116      	bne.n	800186e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_OscConfig+0x328>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e277      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	4973      	ldr	r1, [pc, #460]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800186c:	e040      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d023      	beq.n	80018be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001876:	4b6f      	ldr	r3, [pc, #444]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6e      	ldr	r2, [pc, #440]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f99d 	bl	8000bc0 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff f999 	bl	8000bc0 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e255      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	4b65      	ldr	r3, [pc, #404]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	495f      	ldr	r1, [pc, #380]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e018      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b5d      	ldr	r3, [pc, #372]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a5c      	ldr	r2, [pc, #368]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff f979 	bl	8000bc0 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff f975 	bl	8000bc0 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e231      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d03c      	beq.n	8001976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01c      	beq.n	800193e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001904:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff f954 	bl	8000bc0 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff f950 	bl	8000bc0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e20c      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ef      	beq.n	800191c <HAL_RCC_OscConfig+0x3ec>
 800193c:	e01b      	b.n	8001976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001944:	4a3b      	ldr	r2, [pc, #236]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff f937 	bl	8000bc0 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff f933 	bl	8000bc0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1ef      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ef      	bne.n	8001956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80a6 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001988:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ac:	2301      	movs	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d118      	bne.n	80019ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c8:	f7ff f8fa 	bl	8000bc0 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d0:	f7ff f8f6 	bl	8000bc0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1b2      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_RCC_OscConfig+0x508>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4d8>
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a06:	e029      	b.n	8001a5c <HAL_RCC_OscConfig+0x52c>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d115      	bne.n	8001a3c <HAL_RCC_OscConfig+0x50c>
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x52c>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	4b9a      	ldr	r3, [pc, #616]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	4a99      	ldr	r2, [pc, #612]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a95      	ldr	r2, [pc, #596]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d016      	beq.n	8001a92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f8ac 	bl	8000bc0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f8a8 	bl	8000bc0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e162      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b89      	ldr	r3, [pc, #548]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ed      	beq.n	8001a6c <HAL_RCC_OscConfig+0x53c>
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f895 	bl	8000bc0 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f891 	bl	8000bc0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e14b      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab0:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ed      	bne.n	8001a9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ae4:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aea:	4a6f      	ldr	r2, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f864 	bl	8000bc0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afc:	f7ff f860 	bl	8000bc0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e11c      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ef      	beq.n	8001afc <HAL_RCC_OscConfig+0x5cc>
 8001b1c:	e01b      	b.n	8001b56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b1e:	4b62      	ldr	r3, [pc, #392]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b24:	4a60      	ldr	r2, [pc, #384]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f847 	bl	8000bc0 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b36:	f7ff f843 	bl	8000bc0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0ff      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b48:	4b57      	ldr	r3, [pc, #348]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ef      	bne.n	8001b36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80f3 	beq.w	8001d46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f040 80c9 	bne.w	8001cfc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d12c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d123      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d113      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d06b      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d062      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0ac      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bfa:	f7fe ffe1 	bl	8000bc0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7fe ffdd 	bl	8000bc0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e099      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x77c>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c3a:	0212      	lsls	r2, r2, #8
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c42:	0852      	lsrs	r2, r2, #1
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0552      	lsls	r2, r2, #21
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	3a01      	subs	r2, #1
 8001c52:	0652      	lsls	r2, r2, #25
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c5a:	06d2      	lsls	r2, r2, #27
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	4912      	ldr	r1, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7c:	f7fe ffa0 	bl	8000bc0 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7fe ff9c 	bl	8000bc0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_OscConfig+0x778>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca2:	e050      	b.n	8001d46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04f      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d144      	bne.n	8001d46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd4:	f7fe ff74 	bl	8000bc0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7fe ff70 	bl	8000bc0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e02c      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x7ac>
 8001cfa:	e024      	b.n	8001d46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d01f      	beq.n	8001d42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff57 	bl	8000bc0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe ff53 	bl	8000bc0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4905      	ldr	r1, [pc, #20]	; (8001d50 <HAL_RCC_OscConfig+0x820>)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x824>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
 8001d40:	e001      	b.n	8001d46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	feeefffc 	.word	0xfeeefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0e7      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4970      	ldr	r1, [pc, #448]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cf      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d908      	bls.n	8001dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4960      	ldr	r1, [pc, #384]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04c      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0a6      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b54      	ldr	r3, [pc, #336]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e09a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e08e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e086      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4943      	ldr	r1, [pc, #268]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7fe febe 	bl	8000bc0 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe feba 	bl	8000bc0 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e06e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d208      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	492b      	ldr	r1, [pc, #172]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d210      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0207 	bic.w	r2, r3, #7
 8001eb4:	4923      	ldr	r1, [pc, #140]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e036      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4918      	ldr	r1, [pc, #96]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4910      	ldr	r1, [pc, #64]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0c:	f000 f824 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	490b      	ldr	r1, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1fc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fdf5 	bl	8000b20 <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08003a78 	.word	0x08003a78
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11e      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e004      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d134      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xac>
 8001ffc:	e005      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e002      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	617b      	str	r3, [r7, #20]
      break;
 800200e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0e5b      	lsrs	r3, r3, #25
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	3301      	adds	r3, #1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002050:	69bb      	ldr	r3, [r7, #24]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	08003a90 	.word	0x08003a90
 8002068:	00f42400 	.word	0x00f42400
 800206c:	007a1200 	.word	0x007a1200

08002070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCC_GetHCLKFreq+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800208c:	f7ff fff0 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08003a88 	.word	0x08003a88

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b8:	f7ff ffda 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08003a88 	.word	0x08003a88

080020e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9b6 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
 80020fe:	e014      	b.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f9a6 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d10b      	bne.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d919      	bls.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2ba0      	cmp	r3, #160	; 0xa0
 800213c:	d902      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e013      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e010      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d902      	bls.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e00a      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d102      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e004      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b70      	cmp	r3, #112	; 0x70
 8002166:	d101      	bne.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0207 	bic.w	r2, r3, #7
 8002174:	4909      	ldr	r1, [pc, #36]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ac:	2300      	movs	r3, #0
 80021ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021c4:	d01a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ca:	d814      	bhi.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021d4:	d10f      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a5c      	ldr	r2, [pc, #368]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e2:	e00c      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fa44 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f4:	e003      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	74fb      	strb	r3, [r7, #19]
      break;
 80021fa:	e000      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002204:	4b51      	ldr	r3, [pc, #324]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	494e      	ldr	r1, [pc, #312]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800221a:	e001      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 809e 	beq.w	800236a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	4a3f      	ldr	r2, [pc, #252]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002252:	6593      	str	r3, [r2, #88]	; 0x58
 8002254:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002260:	2301      	movs	r3, #1
 8002262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a39      	ldr	r2, [pc, #228]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002270:	f7fe fca6 	bl	8000bc0 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002276:	e009      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fca2 	bl	8000bc0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d902      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	74fb      	strb	r3, [r7, #19]
        break;
 800228a:	e005      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ef      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d15a      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800229e:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01e      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d019      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e6:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d016      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe fc62 	bl	8000bc0 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fe:	e00b      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe fc5e 	bl	8000bc0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d902      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	74fb      	strb	r3, [r7, #19]
            break;
 8002316:	e006      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ec      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233a:	4904      	ldr	r1, [pc, #16]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
 8002348:	e006      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002358:	7c7b      	ldrb	r3, [r7, #17]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b9e      	ldr	r3, [pc, #632]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4a9d      	ldr	r2, [pc, #628]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002376:	4b98      	ldr	r3, [pc, #608]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f023 0203 	bic.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4994      	ldr	r1, [pc, #592]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002398:	4b8f      	ldr	r3, [pc, #572]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 020c 	bic.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	498c      	ldr	r1, [pc, #560]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ba:	4b87      	ldr	r3, [pc, #540]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	4983      	ldr	r1, [pc, #524]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023dc:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	497b      	ldr	r1, [pc, #492]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023fe:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4972      	ldr	r1, [pc, #456]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002420:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	496a      	ldr	r1, [pc, #424]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002442:	4b65      	ldr	r3, [pc, #404]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	4961      	ldr	r1, [pc, #388]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002464:	4b5c      	ldr	r3, [pc, #368]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002472:	4959      	ldr	r1, [pc, #356]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	4950      	ldr	r1, [pc, #320]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024a8:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	4948      	ldr	r1, [pc, #288]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024d0:	f023 0203 	bic.w	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	493f      	ldr	r1, [pc, #252]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d028      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fa:	4937      	ldr	r1, [pc, #220]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250a:	d106      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800250c:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002516:	60d3      	str	r3, [r2, #12]
 8002518:	e011      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002522:	d10c      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	2101      	movs	r1, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f8a4 	bl	8002678 <RCCEx_PLLSAI1_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d028      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800254a:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	491f      	ldr	r1, [pc, #124]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002568:	d106      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002574:	60d3      	str	r3, [r2, #12]
 8002576:	e011      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002580:	d10c      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2101      	movs	r1, #1
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f875 	bl	8002678 <RCCEx_PLLSAI1_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d02b      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c6:	d109      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a02      	ldr	r2, [pc, #8]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d2:	60d3      	str	r3, [r2, #12]
 80025d4:	e014      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2101      	movs	r1, #1
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f843 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01c      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	4916      	ldr	r1, [pc, #88]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800262a:	d10c      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	2102      	movs	r1, #2
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f820 	bl	8002678 <RCCEx_PLLSAI1_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002668:	7cbb      	ldrb	r3, [r7, #18]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000

08002678 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002686:	4b74      	ldr	r3, [pc, #464]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d018      	beq.n	80026c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002692:	4b71      	ldr	r3, [pc, #452]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d10d      	bne.n	80026be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
       ||
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026aa:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d047      	beq.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e044      	b.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d018      	beq.n	80026fe <RCCEx_PLLSAI1_Config+0x86>
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d825      	bhi.n	800271c <RCCEx_PLLSAI1_Config+0xa4>
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d002      	beq.n	80026da <RCCEx_PLLSAI1_Config+0x62>
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d009      	beq.n	80026ec <RCCEx_PLLSAI1_Config+0x74>
 80026d8:	e020      	b.n	800271c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11d      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ea:	e01a      	b.n	8002722 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ec:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d116      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e013      	b.n	8002726 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026fe:	4b56      	ldr	r3, [pc, #344]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800270a:	4b53      	ldr	r3, [pc, #332]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800271a:	e006      	b.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
      break;
 8002720:	e004      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272a:	bf00      	nop
    }

    if(status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002732:	4b49      	ldr	r3, [pc, #292]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	430b      	orrs	r3, r1
 8002748:	4943      	ldr	r1, [pc, #268]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d17c      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002754:	4b40      	ldr	r3, [pc, #256]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800275e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fa2e 	bl	8000bc0 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002766:	e009      	b.n	800277c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002768:	f7fe fa2a 	bl	8000bc0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d902      	bls.n	800277c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	73fb      	strb	r3, [r7, #15]
        break;
 800277a:	e005      	b.n	8002788 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ef      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d15f      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d110      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800279c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6892      	ldr	r2, [r2, #8]
 80027a4:	0211      	lsls	r1, r2, #8
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68d2      	ldr	r2, [r2, #12]
 80027aa:	06d2      	lsls	r2, r2, #27
 80027ac:	430a      	orrs	r2, r1
 80027ae:	492a      	ldr	r1, [pc, #168]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	610b      	str	r3, [r1, #16]
 80027b4:	e027      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d112      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6892      	ldr	r2, [r2, #8]
 80027cc:	0211      	lsls	r1, r2, #8
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6912      	ldr	r2, [r2, #16]
 80027d2:	0852      	lsrs	r2, r2, #1
 80027d4:	3a01      	subs	r2, #1
 80027d6:	0552      	lsls	r2, r2, #21
 80027d8:	430a      	orrs	r2, r1
 80027da:	491f      	ldr	r1, [pc, #124]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	610b      	str	r3, [r1, #16]
 80027e0:	e011      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6892      	ldr	r2, [r2, #8]
 80027f2:	0211      	lsls	r1, r2, #8
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6952      	ldr	r2, [r2, #20]
 80027f8:	0852      	lsrs	r2, r2, #1
 80027fa:	3a01      	subs	r2, #1
 80027fc:	0652      	lsls	r2, r2, #25
 80027fe:	430a      	orrs	r2, r1
 8002800:	4915      	ldr	r1, [pc, #84]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a13      	ldr	r2, [pc, #76]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002810:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe f9d5 	bl	8000bc0 <HAL_GetTick>
 8002816:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002818:	e009      	b.n	800282e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800281a:	f7fe f9d1 	bl	8000bc0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	73fb      	strb	r3, [r7, #15]
          break;
 800282c:	e005      	b.n	800283a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ef      	beq.n	800281a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d106      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e095      	b.n	800299a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d009      	beq.n	8002894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
 8002886:	e005      	b.n	8002894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe f808 	bl	80008c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028d4:	d902      	bls.n	80028dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	e002      	b.n	80028e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028ea:	d007      	beq.n	80028fc <HAL_SPI_Init+0xa0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	ea42 0103 	orr.w	r1, r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	f003 0204 	and.w	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002978:	ea42 0103 	orr.w	r1, r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e040      	b.n	8002a36 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fd ffbf 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2224      	movs	r2, #36	; 0x24
 80029ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fb2f 	bl	8003044 <UART_SetConfig>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e022      	b.n	8002a36 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fda9 	bl	8003550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fe30 	bl	8003694 <UART_CheckIdleState>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0ba      	sub	sp, #232	; 0xe8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a6e:	4013      	ands	r3, r2
 8002a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d115      	bne.n	8002aa8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00f      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 82a6 	beq.w	8002fea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
      }
      return;
 8002aa6:	e2a0      	b.n	8002fea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8117 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002abe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_UART_IRQHandler+0x298>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 810a 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d011      	beq.n	8002afc <HAL_UART_IRQHandler+0xbc>
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d011      	beq.n	8002b2c <HAL_UART_IRQHandler+0xec>
 8002b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d011      	beq.n	8002b5c <HAL_UART_IRQHandler+0x11c>
 8002b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	f043 0208 	orr.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_UART_IRQHandler+0x18a>
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 820c 	beq.w	8002fee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d005      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d04f      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fe43 	bl	80038ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d141      	bne.n	8002cba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1d9      	bne.n	8002c36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d013      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <HAL_UART_IRQHandler+0x29c>)
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f8ed 	bl	8000e76 <HAL_DMA_Abort_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002cac:	4610      	mov	r0, r2
 8002cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e00f      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9b0 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e00b      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9ac 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e007      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9a8 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002cd0:	e18d      	b.n	8002fee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd2:	bf00      	nop
    return;
 8002cd4:	e18b      	b.n	8002fee <HAL_UART_IRQHandler+0x5ae>
 8002cd6:	bf00      	nop
 8002cd8:	04000120 	.word	0x04000120
 8002cdc:	08003975 	.word	0x08003975

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 8146 	bne.w	8002f76 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 813f 	beq.w	8002f76 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8138 	beq.w	8002f76 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	f040 80b4 	bne.w	8002e86 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 815f 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	f080 8157 	bcs.w	8002ff2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8085 	bne.w	8002e6a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1da      	bne.n	8002d60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3308      	adds	r3, #8
 8002db0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e1      	bne.n	8002daa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3308      	adds	r3, #8
 8002e06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e3      	bne.n	8002de6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3a:	f023 0310 	bic.w	r3, r3, #16
 8002e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e4      	bne.n	8002e2a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd ffc8 	bl	8000dfa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8d4 	bl	800302c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e84:	e0b5      	b.n	8002ff2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80a7 	beq.w	8002ff6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a2 	beq.w	8002ff6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e4      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3308      	adds	r3, #8
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3308      	adds	r3, #8
 8002f08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f0c:	633a      	str	r2, [r7, #48]	; 0x30
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e3      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0310 	bic.w	r3, r3, #16
 8002f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	69b9      	ldr	r1, [r7, #24]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	617b      	str	r3, [r7, #20]
   return(result);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e4      	bne.n	8002f32 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f85c 	bl	800302c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f74:	e03f      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00e      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x560>
 8002f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fd2b 	bl	80039f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f9e:	e02d      	b.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
    }
    return;
 8002fc8:	e017      	b.n	8002ffa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d012      	beq.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
 8002fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fcdc 	bl	80039a0 <UART_EndTransmit_IT>
    return;
 8002fe8:	e008      	b.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
      return;
 8002fea:	bf00      	nop
 8002fec:	e006      	b.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
    return;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
      return;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
      return;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_UART_IRQHandler+0x5bc>
    return;
 8002ffa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002ffc:	37e8      	adds	r7, #232	; 0xe8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop

08003004 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4313      	orrs	r3, r2
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4ba5      	ldr	r3, [pc, #660]	; (8003308 <UART_SetConfig+0x2c4>)
 8003074:	4013      	ands	r3, r2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800307c:	430b      	orrs	r3, r1
 800307e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a9a      	ldr	r2, [pc, #616]	; (800330c <UART_SetConfig+0x2c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	4313      	orrs	r3, r2
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a91      	ldr	r2, [pc, #580]	; (8003310 <UART_SetConfig+0x2cc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d126      	bne.n	800311c <UART_SetConfig+0xd8>
 80030ce:	4b91      	ldr	r3, [pc, #580]	; (8003314 <UART_SetConfig+0x2d0>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d81b      	bhi.n	8003114 <UART_SetConfig+0xd0>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <UART_SetConfig+0xa0>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	08003105 	.word	0x08003105
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e0d6      	b.n	80032aa <UART_SetConfig+0x266>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e0d2      	b.n	80032aa <UART_SetConfig+0x266>
 8003104:	2304      	movs	r3, #4
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e0ce      	b.n	80032aa <UART_SetConfig+0x266>
 800310c:	2308      	movs	r3, #8
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e0ca      	b.n	80032aa <UART_SetConfig+0x266>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e0c6      	b.n	80032aa <UART_SetConfig+0x266>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a7d      	ldr	r2, [pc, #500]	; (8003318 <UART_SetConfig+0x2d4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d138      	bne.n	8003198 <UART_SetConfig+0x154>
 8003126:	4b7b      	ldr	r3, [pc, #492]	; (8003314 <UART_SetConfig+0x2d0>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d82d      	bhi.n	8003190 <UART_SetConfig+0x14c>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <UART_SetConfig+0xf8>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003171 	.word	0x08003171
 8003140:	08003191 	.word	0x08003191
 8003144:	08003191 	.word	0x08003191
 8003148:	08003191 	.word	0x08003191
 800314c:	08003181 	.word	0x08003181
 8003150:	08003191 	.word	0x08003191
 8003154:	08003191 	.word	0x08003191
 8003158:	08003191 	.word	0x08003191
 800315c:	08003179 	.word	0x08003179
 8003160:	08003191 	.word	0x08003191
 8003164:	08003191 	.word	0x08003191
 8003168:	08003191 	.word	0x08003191
 800316c:	08003189 	.word	0x08003189
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e098      	b.n	80032aa <UART_SetConfig+0x266>
 8003178:	2302      	movs	r3, #2
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e094      	b.n	80032aa <UART_SetConfig+0x266>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e090      	b.n	80032aa <UART_SetConfig+0x266>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e08c      	b.n	80032aa <UART_SetConfig+0x266>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e088      	b.n	80032aa <UART_SetConfig+0x266>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5f      	ldr	r2, [pc, #380]	; (800331c <UART_SetConfig+0x2d8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d125      	bne.n	80031ee <UART_SetConfig+0x1aa>
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <UART_SetConfig+0x2d0>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031ac:	2b30      	cmp	r3, #48	; 0x30
 80031ae:	d016      	beq.n	80031de <UART_SetConfig+0x19a>
 80031b0:	2b30      	cmp	r3, #48	; 0x30
 80031b2:	d818      	bhi.n	80031e6 <UART_SetConfig+0x1a2>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d00a      	beq.n	80031ce <UART_SetConfig+0x18a>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d814      	bhi.n	80031e6 <UART_SetConfig+0x1a2>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <UART_SetConfig+0x182>
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d008      	beq.n	80031d6 <UART_SetConfig+0x192>
 80031c4:	e00f      	b.n	80031e6 <UART_SetConfig+0x1a2>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031cc:	e06d      	b.n	80032aa <UART_SetConfig+0x266>
 80031ce:	2302      	movs	r3, #2
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d4:	e069      	b.n	80032aa <UART_SetConfig+0x266>
 80031d6:	2304      	movs	r3, #4
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031dc:	e065      	b.n	80032aa <UART_SetConfig+0x266>
 80031de:	2308      	movs	r3, #8
 80031e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e4:	e061      	b.n	80032aa <UART_SetConfig+0x266>
 80031e6:	2310      	movs	r3, #16
 80031e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ec:	e05d      	b.n	80032aa <UART_SetConfig+0x266>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x2dc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <UART_SetConfig+0x200>
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <UART_SetConfig+0x2d0>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003202:	2bc0      	cmp	r3, #192	; 0xc0
 8003204:	d016      	beq.n	8003234 <UART_SetConfig+0x1f0>
 8003206:	2bc0      	cmp	r3, #192	; 0xc0
 8003208:	d818      	bhi.n	800323c <UART_SetConfig+0x1f8>
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	d00a      	beq.n	8003224 <UART_SetConfig+0x1e0>
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d814      	bhi.n	800323c <UART_SetConfig+0x1f8>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <UART_SetConfig+0x1d8>
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d008      	beq.n	800322c <UART_SetConfig+0x1e8>
 800321a:	e00f      	b.n	800323c <UART_SetConfig+0x1f8>
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e042      	b.n	80032aa <UART_SetConfig+0x266>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e03e      	b.n	80032aa <UART_SetConfig+0x266>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e03a      	b.n	80032aa <UART_SetConfig+0x266>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e036      	b.n	80032aa <UART_SetConfig+0x266>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e032      	b.n	80032aa <UART_SetConfig+0x266>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a30      	ldr	r2, [pc, #192]	; (800330c <UART_SetConfig+0x2c8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d12a      	bne.n	80032a4 <UART_SetConfig+0x260>
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <UART_SetConfig+0x2d0>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325c:	d01a      	beq.n	8003294 <UART_SetConfig+0x250>
 800325e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003262:	d81b      	bhi.n	800329c <UART_SetConfig+0x258>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d00c      	beq.n	8003284 <UART_SetConfig+0x240>
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d815      	bhi.n	800329c <UART_SetConfig+0x258>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x238>
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d008      	beq.n	800328c <UART_SetConfig+0x248>
 800327a:	e00f      	b.n	800329c <UART_SetConfig+0x258>
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e012      	b.n	80032aa <UART_SetConfig+0x266>
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e00e      	b.n	80032aa <UART_SetConfig+0x266>
 800328c:	2304      	movs	r3, #4
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e00a      	b.n	80032aa <UART_SetConfig+0x266>
 8003294:	2308      	movs	r3, #8
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e006      	b.n	80032aa <UART_SetConfig+0x266>
 800329c:	2310      	movs	r3, #16
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e002      	b.n	80032aa <UART_SetConfig+0x266>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <UART_SetConfig+0x2c8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	f040 808b 	bne.w	80033cc <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d834      	bhi.n	8003328 <UART_SetConfig+0x2e4>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0x280>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	08003329 	.word	0x08003329
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	08003329 	.word	0x08003329
 80032d4:	080032f7 	.word	0x080032f7
 80032d8:	08003329 	.word	0x08003329
 80032dc:	08003329 	.word	0x08003329
 80032e0:	08003329 	.word	0x08003329
 80032e4:	080032ff 	.word	0x080032ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e8:	f7fe fece 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 80032ec:	61f8      	str	r0, [r7, #28]
        break;
 80032ee:	e021      	b.n	8003334 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <UART_SetConfig+0x2e0>)
 80032f2:	61fb      	str	r3, [r7, #28]
        break;
 80032f4:	e01e      	b.n	8003334 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fe2f 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80032fa:	61f8      	str	r0, [r7, #28]
        break;
 80032fc:	e01a      	b.n	8003334 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	61fb      	str	r3, [r7, #28]
        break;
 8003304:	e016      	b.n	8003334 <UART_SetConfig+0x2f0>
 8003306:	bf00      	nop
 8003308:	efff69f3 	.word	0xefff69f3
 800330c:	40008000 	.word	0x40008000
 8003310:	40013800 	.word	0x40013800
 8003314:	40021000 	.word	0x40021000
 8003318:	40004400 	.word	0x40004400
 800331c:	40004800 	.word	0x40004800
 8003320:	40004c00 	.word	0x40004c00
 8003324:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003332:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80fa 	beq.w	8003530 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	429a      	cmp	r2, r3
 800334a:	d305      	bcc.n	8003358 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	d903      	bls.n	8003360 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800335e:	e0e7      	b.n	8003530 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2200      	movs	r2, #0
 8003364:	461c      	mov	r4, r3
 8003366:	4615      	mov	r5, r2
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	022b      	lsls	r3, r5, #8
 8003372:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003376:	0222      	lsls	r2, r4, #8
 8003378:	68f9      	ldr	r1, [r7, #12]
 800337a:	6849      	ldr	r1, [r1, #4]
 800337c:	0849      	lsrs	r1, r1, #1
 800337e:	2000      	movs	r0, #0
 8003380:	4688      	mov	r8, r1
 8003382:	4681      	mov	r9, r0
 8003384:	eb12 0a08 	adds.w	sl, r2, r8
 8003388:	eb43 0b09 	adc.w	fp, r3, r9
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800339a:	4650      	mov	r0, sl
 800339c:	4659      	mov	r1, fp
 800339e:	f7fc ff19 	bl	80001d4 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4613      	mov	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b0:	d308      	bcc.n	80033c4 <UART_SetConfig+0x380>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b8:	d204      	bcs.n	80033c4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	e0b5      	b.n	8003530 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033ca:	e0b1      	b.n	8003530 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d15d      	bne.n	8003492 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80033d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d827      	bhi.n	800342e <UART_SetConfig+0x3ea>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x3a0>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003419 	.word	0x08003419
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	0800341f 	.word	0x0800341f
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800342f 	.word	0x0800342f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fe3e 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 800340c:	61f8      	str	r0, [r7, #28]
        break;
 800340e:	e014      	b.n	800343a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fe50 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003414:	61f8      	str	r0, [r7, #28]
        break;
 8003416:	e010      	b.n	800343a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b4c      	ldr	r3, [pc, #304]	; (800354c <UART_SetConfig+0x508>)
 800341a:	61fb      	str	r3, [r7, #28]
        break;
 800341c:	e00d      	b.n	800343a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe fd9b 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8003422:	61f8      	str	r0, [r7, #28]
        break;
 8003424:	e009      	b.n	800343a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e005      	b.n	800343a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d077      	beq.n	8003530 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005a      	lsls	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d916      	bls.n	800348a <UART_SetConfig+0x446>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d212      	bcs.n	800348a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f023 030f 	bic.w	r3, r3, #15
 800346c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	b29b      	uxth	r3, r3
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	b29a      	uxth	r2, r3
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	4313      	orrs	r3, r2
 800347e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	8afa      	ldrh	r2, [r7, #22]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	e052      	b.n	8003530 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003490:	e04e      	b.n	8003530 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003496:	2b08      	cmp	r3, #8
 8003498:	d827      	bhi.n	80034ea <UART_SetConfig+0x4a6>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <UART_SetConfig+0x45c>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034eb 	.word	0x080034eb
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7fe fde0 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 80034c8:	61f8      	str	r0, [r7, #28]
        break;
 80034ca:	e014      	b.n	80034f6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7fe fdf2 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 80034d0:	61f8      	str	r0, [r7, #28]
        break;
 80034d2:	e010      	b.n	80034f6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <UART_SetConfig+0x508>)
 80034d6:	61fb      	str	r3, [r7, #28]
        break;
 80034d8:	e00d      	b.n	80034f6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7fe fd3d 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80034de:	61f8      	str	r0, [r7, #28]
        break;
 80034e0:	e009      	b.n	80034f6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e6:	61fb      	str	r3, [r7, #28]
        break;
 80034e8:	e005      	b.n	80034f6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034f4:	bf00      	nop
    }

    if (pclk != 0U)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	085a      	lsrs	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	441a      	add	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d909      	bls.n	800352a <UART_SetConfig+0x4e6>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d205      	bcs.n	800352a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e002      	b.n	8003530 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800353c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354a:	bf00      	nop
 800354c:	00f42400 	.word	0x00f42400

08003550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01a      	beq.n	8003666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364e:	d10a      	bne.n	8003666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  }
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036a4:	f7fd fa8c 	bl	8000bc0 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d10e      	bne.n	80036d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f82d 	bl	8003726 <UART_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e023      	b.n	800371e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d10e      	bne.n	8003702 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f817 	bl	8003726 <UART_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e00d      	b.n	800371e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b09c      	sub	sp, #112	; 0x70
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003736:	e0a5      	b.n	8003884 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	f000 80a1 	beq.w	8003884 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fd fa3d 	bl	8000bc0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <UART_WaitOnFlagUntilTimeout+0x32>
 8003752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003754:	2b00      	cmp	r3, #0
 8003756:	d13e      	bne.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003768:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800376c:	667b      	str	r3, [r7, #100]	; 0x64
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003778:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800377c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e6      	bne.n	8003758 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3308      	adds	r3, #8
 8003790:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	663b      	str	r3, [r7, #96]	; 0x60
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3308      	adds	r3, #8
 80037a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e5      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e067      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d04f      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	d147      	bne.n	8003884 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003812:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
 800381e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e6      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3308      	adds	r3, #8
 8003836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	613b      	str	r3, [r7, #16]
   return(result);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	66bb      	str	r3, [r7, #104]	; 0x68
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3308      	adds	r3, #8
 800384e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003850:	623a      	str	r2, [r7, #32]
 8003852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	69f9      	ldr	r1, [r7, #28]
 8003856:	6a3a      	ldr	r2, [r7, #32]
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	61bb      	str	r3, [r7, #24]
   return(result);
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e5      	bne.n	8003830 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e010      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	429a      	cmp	r2, r3
 80038a0:	f43f af4a 	beq.w	8003738 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3770      	adds	r7, #112	; 0x70
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b095      	sub	sp, #84	; 0x54
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
 80038d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e6      	bne.n	80038b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3308      	adds	r3, #8
 8003906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800390e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003920:	2b01      	cmp	r3, #1
 8003922:	d118      	bne.n	8003956 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	60bb      	str	r3, [r7, #8]
   return(result);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0310 	bic.w	r3, r3, #16
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6979      	ldr	r1, [r7, #20]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	613b      	str	r3, [r7, #16]
   return(result);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e6      	bne.n	8003924 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003968:	bf00      	nop
 800396a:	3754      	adds	r7, #84	; 0x54
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff fb40 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6979      	ldr	r1, [r7, #20]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	613b      	str	r3, [r7, #16]
   return(result);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e6      	bne.n	80039a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fb0c 	bl	8003004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	4d0d      	ldr	r5, [pc, #52]	; (8003a40 <__libc_init_array+0x38>)
 8003a0c:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <__libc_init_array+0x3c>)
 8003a0e:	1b64      	subs	r4, r4, r5
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	2600      	movs	r6, #0
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	4d0b      	ldr	r5, [pc, #44]	; (8003a48 <__libc_init_array+0x40>)
 8003a1a:	4c0c      	ldr	r4, [pc, #48]	; (8003a4c <__libc_init_array+0x44>)
 8003a1c:	f000 f820 	bl	8003a60 <_init>
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	2600      	movs	r6, #0
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	08003ac8 	.word	0x08003ac8
 8003a44:	08003ac8 	.word	0x08003ac8
 8003a48:	08003ac8 	.word	0x08003ac8
 8003a4c:	08003acc 	.word	0x08003acc

08003a50 <memset>:
 8003a50:	4402      	add	r2, r0
 8003a52:	4603      	mov	r3, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d100      	bne.n	8003a5a <memset+0xa>
 8003a58:	4770      	bx	lr
 8003a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5e:	e7f9      	b.n	8003a54 <memset+0x4>

08003a60 <_init>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr

08003a6c <_fini>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr
